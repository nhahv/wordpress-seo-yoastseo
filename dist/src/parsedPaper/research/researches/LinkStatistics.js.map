{"version":3,"sources":["../../../../../src/parsedPaper/research/researches/LinkStatistics.js"],"names":["LinkStatistics","Research","_isNoFollow","linkElement","rel","getAttribute","split","includes","_isHttp","protocol","_whichTarget","domain","link","url","urlMethods","parse","hash","hostname","_getPermalink","metadata","permalinkElement","children","find","child","tag","paragraph","textContainer","text","calculateFor","node","links","formatting","filter","element","type","permalink","results","map","noFollow","target","Promise","resolve"],"mappings":";;;;;;AAAA;;;;AAGA;;;;;;AAEA;;;;;;;;AAQA,MAAMA,cAAN,SAA6BC,kBAA7B,CAAsC;AACrC;;;;;;;;;AASAC,aAAaC,WAAb,EAA2B;AAC1B,QAAMC,MAAMD,YAAYE,YAAZ,CAA0B,KAA1B,CAAZ;;AAEA,MAAK,CAAED,GAAP,EAAa;AACZ,UAAO,KAAP;AACA;;AAED;AACA,SAAOA,IAAIE,KAAJ,CAAW,KAAX,EAAmBC,QAAnB,CAA6B,UAA7B,CAAP;AACA;;AAED;;;;;;;;;AASAC,SAASC,QAAT,EAAoB;AACnB,MAAK,CAAEA,QAAP,EAAkB;AACjB,UAAO,KAAP;AACA;;AAED,SAASA,aAAa,OAAb,IAAwBA,aAAa,QAA9C;AACA;;AAED;;;;;;;;;;;;;AAaAC,cAAcP,WAAd,EAA2BQ,MAA3B,EAAoC;AACnC,QAAMC,OAAOT,YAAYE,YAAZ,CAA0B,MAA1B,CAAb;;AAEA,MAAK,CAAEO,IAAP,EAAc;AACb,UAAO,OAAP;AACA;;AAED,QAAMC,MAAMC,cAAWC,KAAX,CAAkBH,IAAlB,CAAZ;;AAEA,MAAK,CAAE,KAAKJ,OAAL,CAAcK,IAAIJ,QAAlB,CAAF,IAAkCI,IAAIG,IAA3C,EAAkD;AACjD,UAAO,OAAP;AACA;;AAED,MAAKH,IAAII,QAAJ,KAAiBN,MAAtB,EAA+B;AAC9B,UAAO,UAAP;AACA;;AAED,SAAO,UAAP;AACA;;AAED;;;;;;;;;AASAO,eAAeC,QAAf,EAA0B;AACzB,QAAMC,mBAAmBD,SAASE,QAAT,CAAkBC,IAAlB,CAAwBC,SAASA,MAAMC,GAAN,KAAc,WAA/C,CAAzB;AACA,QAAMC,YAAYL,iBAAiBC,QAAjB,CAA2B,CAA3B,CAAlB;AACA,SAAOI,UAAUC,aAAV,CAAwBC,IAA/B;AACA;;AAED;;;;;;;;AAQAC,cAAcC,IAAd,EAAoBV,QAApB,EAA+B;AAC9B;AACA,QAAMW,QAAQD,KAAKH,aAAL,CAAmBK,UAAnB,CAA8BC,MAA9B,CAAsCC,WAAWA,QAAQC,IAAR,KAAiB,GAAlE,CAAd;;AAEA;AACA,QAAMC,YAAY,KAAKjB,aAAL,CAAoBC,QAApB,CAAlB;AACA,QAAMN,MAAMC,cAAWC,KAAX,CAAkBoB,SAAlB,CAAZ;;AAEA;AACA,QAAMC,UAAUN,MAAMO,GAAN,CAAWzB,QAAQ;AAClC,SAAM0B,WAAW,KAAKpC,WAAL,CAAkBU,IAAlB,CAAjB;AACA,SAAM2B,SAAS,KAAK7B,YAAL,CAAmBE,IAAnB,EAAyBC,IAAII,QAA7B,CAAf;;AAEA,UAAO,EAAEL,IAAF,EAAQ0B,QAAR,EAAkBC,MAAlB,EAAP;AACA,GALe,CAAhB;;AAOA,SAAOC,QAAQC,OAAR,CAAiBL,OAAjB,CAAP;AACA;AA/GoC;;AAXtC;kBA6HepC,c","file":"LinkStatistics.js","sourcesContent":["import urlMethods from \"url\";\n\n/* Internal dependencies */\nimport Research from \"./Research\";\n\n/**\n * Calculates link statistics.\n * E.g. which links a node or its children contains, and whether these links are:\n *  * internal (points to a page in the same domain), external (a page in another domain) or other.\n *  * marked as follow (search engines are allowed to follow this link) or no-follow (search engines are not allowed to follow the link).\n *\n *  @memberOf module:parsedPaper/research\n */\nclass LinkStatistics extends Research {\n\t/**\n\t * Checks whether the given link is marked for search engines to not follow.\n\t *\n\t * @param {module:parsedPaper/structure.FormattingElement} linkElement The link to check.\n\t *\n\t * @returns {boolean} `true` if the link is marked as 'no-follow'.\n\t *\n\t * @private\n\t */\n\t_isNoFollow( linkElement ) {\n\t\tconst rel = linkElement.getAttribute( \"rel\" );\n\n\t\tif ( ! rel ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if the `rel` attribute includes \"nofollow\".\n\t\treturn rel.split( /\\s+/ ).includes( \"nofollow\" );\n\t}\n\n\t/**\n\t * Checks whether the given protocol string is either HTTP or HTTPS.\n\t *\n\t * @param {String} protocol The protocol string to check.\n\t *\n\t * @returns {boolean} Whether the protocol is either HTTP or HTTPS.\n\t *\n\t * @private\n\t */\n\t_isHttp( protocol ) {\n\t\tif ( ! protocol ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn ( protocol === \"http:\" || protocol === \"https:\" );\n\t}\n\n\t/**\n\t * Checks whether the given link is:\n\t *  * internal: points to a web page in the same domain as the current site.\n\t *  * external: points to a web page in another domain as the current site.\n\t *  * other: e.g. uses another protocol like `ftp`.\n\t *\n\t * @param {module:parsedPaper/structure.FormattingElement} linkElement The link to check.\n\t * @param {string}                                         domain The domain to check against.\n\t *\n\t * @returns {\"external\"|\"internal\"|\"other\"} Whether the link points to an external, internal or other web page.\n\t *\n\t * @private\n\t */\n\t_whichTarget( linkElement, domain ) {\n\t\tconst link = linkElement.getAttribute( \"href\" );\n\n\t\tif ( ! link ) {\n\t\t\treturn \"other\";\n\t\t}\n\n\t\tconst url = urlMethods.parse( link );\n\n\t\tif ( ! this._isHttp( url.protocol ) || url.hash ) {\n\t\t\treturn \"other\";\n\t\t}\n\n\t\tif ( url.hostname === domain ) {\n\t\t\treturn \"internal\";\n\t\t}\n\n\t\treturn \"external\";\n\t}\n\n\t/**\n\t * Returns the permalink from the metadata.\n\t *\n\t * @param {module:parsedPaper/structure.Node} metadata The metadata to retrieve the permalink from.\n\t *\n\t * @returns {string} The permalink.\n\t *\n\t * @private\n\t */\n\t_getPermalink( metadata ) {\n\t\tconst permalinkElement = metadata.children.find( child => child.tag === \"permalink\" );\n\t\tconst paragraph = permalinkElement.children[ 0 ];\n\t\treturn paragraph.textContainer.text;\n\t}\n\n\t/**\n\t * Calculates link statistics for the given node.\n\t *\n\t * @param {module:parsedPaper/structure.Node} node     The node to calculate the research for.\n\t * @param {module:parsedPaper/structure.Node} metadata The document's metadata.\n\t *\n\t * @returns {Promise<Object[]>} The research results.\n\t */\n\tcalculateFor( node, metadata ) {\n\t\t// Collect link elements.\n\t\tconst links = node.textContainer.formatting.filter( element => element.type === \"a\" );\n\n\t\t// URL of the current page.\n\t\tconst permalink = this._getPermalink( metadata );\n\t\tconst url = urlMethods.parse( permalink );\n\n\t\t// Collect statistics about the links.\n\t\tconst results = links.map( link => {\n\t\t\tconst noFollow = this._isNoFollow( link );\n\t\t\tconst target = this._whichTarget( link, url.hostname );\n\n\t\t\treturn { link, noFollow, target };\n\t\t} );\n\n\t\treturn Promise.resolve( results );\n\t}\n}\n\nexport default LinkStatistics;\n"]}