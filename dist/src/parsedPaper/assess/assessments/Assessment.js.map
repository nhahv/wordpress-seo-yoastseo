{"version":3,"sources":["../../../../../src/parsedPaper/assess/assessments/Assessment.js"],"names":["Assessment","constructor","name","researcher","_researcher","setResearcher","getResearcher","isApplicable","parsedPaper","console","warn","apply"],"mappings":";;;;;AAAA;;;;;;;AAOA,MAAMA,UAAN,CAAiB;AAChB;;;;;;;;AAQAC,aAAaC,IAAb,EAAmBC,UAAnB,EAAgC;AAC/B;;;;AAIA,OAAKD,IAAL,GAAYA,IAAZ;AACA;;;;;AAKA,OAAKE,WAAL,GAAmBD,UAAnB;AACA;;AAED;;;;;;;AAOAE,eAAeF,UAAf,EAA4B;AAC3B,OAAKC,WAAL,GAAmBD,UAAnB;AACA;;AAED;;;;;AAKAG,iBAAgB;AACf,SAAO,KAAKF,WAAZ;AACA;;AAED;;;;;;;;;AASA,OAAMG,YAAN,CAAoBC,WAApB,EAAkC;AAAE;AACnCC,UAAQC,IAAR,CAAc,wEAAd;AACA;;AAED;;;;;;;;;AASA,OAAMC,KAAN,CAAaH,WAAb,EAA2B;AAAE;AAC5BC,UAAQC,IAAR,CAAc,iEAAd;AACA;AAnEe;;kBAuEFV,U","file":"Assessment.js","sourcesContent":["/**\n * An assessment that can be applied to a formatted text and its meta data.\n *\n * @memberOf module:parsedPaper/assess\n *\n * @abstract\n */\nclass Assessment {\n\t/**\n\t * Creates a new assessment.\n\t *\n\t * @param {string}                              name       The name to give this assessment.\n\t * @param {module:parsedPaper/research.TreeResearcher} researcher The researcher to do researches with.\n\t *\n\t * @abstract\n\t */\n\tconstructor( name, researcher ) {\n\t\t/**\n\t\t * This assessment's name.\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\t\t/**\n\t\t * The researcher to do researches with.\n\t\t * @type {module:parsedPaper/research.TreeResearcher}\n\t\t * @private\n\t\t */\n\t\tthis._researcher = researcher;\n\t}\n\n\t/**\n\t * Sets a new researcher on this assessment.\n\t *\n\t * @param {module:parsedPaper/research.TreeResearcher} researcher The researcher to do researches with.\n\t *\n\t * @returns {void}\n\t */\n\tsetResearcher( researcher ) {\n\t\tthis._researcher = researcher;\n\t}\n\n\t/**\n\t * Returns the researcher used by this assessment.\n\t *\n\t * @returns {module:parsedPaper/research.TreeResearcher} The researcher used by this assessment.\n\t */\n\tgetResearcher() {\n\t\treturn this._researcher;\n\t}\n\n\t/**\n\t * Checks whether this assessment is applicable to the given paper and tree combination.\n\t *\n\t * @param {ParsedPaper} parsedPaper The parsedPaper to check.\n\t *\n\t * @returns {Promise<boolean>} Whether this assessment is applicable to the given paper and tree combination (wrapped in a promise).\n\t *\n\t * @abstract\n\t */\n\tasync isApplicable( parsedPaper ) { // eslint-disable-line no-unused-vars\n\t\tconsole.warn( \"`isApplicable` should be implemented by a child class of `Assessment`.\" );\n\t}\n\n\t/**\n\t * Applies this assessment to the given combination of parsedPaper and tree.\n\t *\n\t * @param {ParsedPaper} parsedPaper The parsedPaper to check.\n\t *\n\t * @returns {Promise<AssessmentResult>} The result of this assessment (wrapped in a promise).\n\t *\n\t * @abstract\n\t */\n\tasync apply( parsedPaper ) { // eslint-disable-line no-unused-vars\n\t\tconsole.warn( \"`apply` should be implemented by a child class of `Assessment`.\" );\n\t}\n}\n\n\nexport default Assessment;\n"]}