{"version":3,"sources":["../../../../../../src/parsedPaper/structure/tree/nodes/LeafNode.js"],"names":["LeafNode","Node","constructor","type","sourceCodeLocation","textContainer","TextContainer","text","appendText","addFormatting","formatting","parent","push"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AACA;;;;;;;;;;AAUA,MAAMA,QAAN,SAAuBC,cAAvB,CAA4B;AAC3B;;;;;;;;AAQAC,aAAaC,IAAb,EAAmBC,kBAAnB,EAAwC;AACvC,QAAOD,IAAP,EAAaC,kBAAb;AACA;;;;AAIA,OAAKC,aAAL,GAAqB,IAAIC,uBAAJ,EAArB;AACA;;AAED;;;;;AAKA,KAAIC,IAAJ,GAAW;AACV,SAAO,KAAKF,aAAL,CAAmBE,IAA1B;AACA;;AAED;;;;;;;AAOA,KAAIA,IAAJ,CAAUA,IAAV,EAAiB;AAChB,OAAKF,aAAL,CAAmBE,IAAnB,GAA0BA,IAA1B;AACA;;AAED;;;;;;;AAOAC,YAAYD,IAAZ,EAAmB;AAClB,OAAKF,aAAL,CAAmBG,UAAnB,CAA+BD,IAA/B;AACA;;AAED;;;;;;;AAOAE,eAAeC,UAAf,EAA4B;AAC3BA,aAAWC,MAAX,GAAoB,IAApB;AACA,OAAKN,aAAL,CAAmBK,UAAnB,CAA8BE,IAA9B,CAAoCF,UAApC;AACA;AA3D0B;;kBA8DbV,Q","file":"LeafNode.js","sourcesContent":["import TextContainer from \"../TextContainer\";\nimport Node from \"./Node\";\n/**\n * A node at the end of the tree that may only contain formatting elements,\n * these include headings and paragraphs.\n *\n * @extends module:parsedPaper/structure.Node\n *\n * @memberOf module:parsedPaper/structure\n *\n * @abstract\n */\nclass LeafNode extends Node {\n\t/**\n\t * Creates a new leaf node.\n\t *\n\t * @param {string} type               The type of Node (should be unique for each child class of Node).\n\t * @param {Object} sourceCodeLocation The parse5 formatted location of the element inside of the source code.\n\t *\n\t * @returns {void}\n\t */\n\tconstructor( type, sourceCodeLocation ) {\n\t\tsuper( type, sourceCodeLocation );\n\t\t/**\n\t\t * A container for keeping this leaf node's text.\n\t\t * @type {module:parsedPaper/structure.TextContainer}\n\t\t */\n\t\tthis.textContainer = new TextContainer();\n\t}\n\n\t/**\n\t * Retrieves the heading text (from the TextContainer).\n\t *\n\t * @returns {string} The text of the heading.\n\t */\n\tget text() {\n\t\treturn this.textContainer.text;\n\t}\n\n\t/**\n\t * Sets the heading text (via the TextContainer).\n\t *\n\t * @param {string} text The text to assign as the heading text.\n\t *\n\t * @returns {void}\n\t */\n\tset text( text ) {\n\t\tthis.textContainer.text = text;\n\t}\n\n\t/**\n\t * Appends text to this leaf node.\n\t *\n\t * @param {string} text The text to append.\n\t *\n\t * @returns {void}\n\t */\n\tappendText( text ) {\n\t\tthis.textContainer.appendText( text );\n\t}\n\n\t/**\n\t * Adds formatting and sets the formatting's parent to this leaf node.\n\t *\n\t * @param {FormattingElement} formatting The formatting to add.\n\t *\n\t * @returns {void}\n\t */\n\taddFormatting( formatting ) {\n\t\tformatting.parent = this;\n\t\tthis.textContainer.formatting.push( formatting );\n\t}\n}\n\nexport default LeafNode;\n"]}