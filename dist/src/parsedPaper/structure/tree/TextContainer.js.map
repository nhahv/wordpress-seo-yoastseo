{"version":3,"sources":["../../../../../src/parsedPaper/structure/tree/TextContainer.js"],"names":["TextContainer","constructor","text","formatting","_tree","appendText","getTree"],"mappings":";;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,MAAMA,aAAN,CAAoB;AACnB;;;AAGAC,eAAc;AACb;;;;AAIA,OAAKC,IAAL,GAAY,EAAZ;AACA;;;;AAIA,OAAKC,UAAL,GAAkB,EAAlB;;AAEA;;;AAGA,OAAKC,KAAL,GAAa,EAAb;AACA;;AAED;;;;;;;AAOAC,YAAYH,IAAZ,EAAmB;AAClB;AACA,OAAKA,IAAL,IAAaA,IAAb;AACA,OAAKE,KAAL,GAAa,EAAb;AACA;;AAED;;;;;;;;AAQAE,WAAU;AACT,MAAK,CAAE,uBAAS,KAAKF,KAAd,CAAP,EAA+B;AAC9B,UAAO,KAAKA,KAAZ;AACA;;AAED,OAAKA,KAAL,GAAa,uCAAwB,KAAKF,IAA7B,CAAb;AACA,SAAO,KAAKE,KAAZ;AACA;AAlDkB;;kBAqDLJ,a","file":"TextContainer.js","sourcesContent":["import { isEmpty } from \"lodash-es\";\nimport { parseTextIntoSentences } from \"../../build/linguisticParsing/parseText\";\n\n/**\n * Represents a text (with optional formatting element(s)) within a document that can be read by a reader.\n *\n * Example (in the case of HTML):\n * ```html\n * This text is <strong id=\"elem-id\">very strong</strong>.\n * ```\n * is transformed to:\n * ```js\n * TextContainer {\n *     text: \"This text is very strong\".\n *     formatting: [\n *         FormattingElement {\n *             type: \"strong\",\n *             sourceStartIndex: 13, // \"This text is \".length\n *             sourceEndIndex: 54,   // \"This text is <strong id=\"elem-id\">very strong</strong>\".length\n *             textStartIndex: 13,  // \"This text is \".length\n *             textEndIndex: 24,    // \"This text is very strong\".length\n *             attributes: {\n *                 id: \"elem-id\"\n *             }\n *         }\n *     ]\n * }\n * ```\n *\n * @memberOf module:parsedPaper/structure\n */\nclass TextContainer {\n\t/**\n\t * Represents a text (with optional formatting element(s)) within a document that can be read by a reader.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Clean, analyzable text, without formatting.\n\t\t * @type {string}\n\t\t */\n\t\tthis.text = \"\";\n\t\t/**\n\t\t * This text's formatting (e.g. bold text, links, etc.).\n\t\t * @type {Array<module:parsedPaper/structure.FormattingElement>}\n\t\t */\n\t\tthis.formatting = [];\n\n\t\t/**\n\t\t * A cache for the tree representations of this container's text.\n\t\t */\n\t\tthis._tree = {};\n\t}\n\n\t/**\n\t * Adds a text string to this container's text.\n\t *\n\t * @param {string} text The text to be added to the TextContainer.\n\t *\n\t * @returns {void}\n\t */\n\tappendText( text ) {\n\t\t// If the text changes, the 'linguistic' tree should be rebuilt. This means the cache should be cleared.\n\t\tthis.text += text;\n\t\tthis._tree = {};\n\t}\n\n\t/**\n\t * Returns the tree representation of this container's text.\n\t *\n\t * If the cache is filled, it will return the cached tree.\n\t * If the cache is empty, it will additionally construct the tree and fill the cache.\n\t *\n\t * @returns {Object} The tree representation of the text.\n\t */\n\tgetTree() {\n\t\tif ( ! isEmpty( this._tree ) ) {\n\t\t\treturn this._tree;\n\t\t}\n\n\t\tthis._tree = parseTextIntoSentences( this.text );\n\t\treturn this._tree;\n\t}\n}\n\nexport default TextContainer;\n"]}