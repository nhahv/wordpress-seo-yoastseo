{"version":3,"sources":["../../../../../../src/parsedPaper/build/tree/cleanup/postParsing.js"],"names":["cleanUpNode","node","LeafNode","cleanUpTree","tree","map"],"mappings":";;;;;;AAAA;;AACA;;;;;;AAEA;;;;;;;;;AASA,MAAMA,cAAc,SAAdA,WAAc,CAAUC,IAAV,EAAiB;AACpC;AACA,MAAKA,gBAAgBC,cAArB,EAAgC;AAC/B;AACA,wCAAsBD,IAAtB;AACA;AACD,SAAOA,IAAP;AACA,CAPD;;AASA;;;;;;;;;;AAUA,MAAME,cAAc,SAAdA,WAAc,CAAUC,IAAV,EAAiB;AACpCA,OAAKC,GAAL,CAAUJ,QAAQD,YAAaC,IAAb,CAAlB;AACA,SAAOG,IAAP;AACA,CAHD;;kBAKeD,W","file":"postParsing.js","sourcesContent":["import { LeafNode } from \"../../../structure/tree\";\nimport calculateTextIndices from \"./calculateTextIndices\";\n\n/**\n * Cleans up a node in the tree.\n *\n * @param {module:parsedPaper/structure.Node} node The node that needs to be cleaned.\n *\n * @returns {module:parsedPaper/structure.Node} The cleaned up node.\n *\n * @private\n */\nconst cleanUpNode = function( node ) {\n\t// Clean up formatting elements in headings and paragraphs.\n\tif ( node instanceof LeafNode ) {\n\t\t// Start and end position in leaf node's (header's or paragraph's) text without formatting.\n\t\tcalculateTextIndices( node );\n\t}\n\treturn node;\n};\n\n/**\n * Cleans up the given tree after parsing of the HTML source code\n * by setting the start and end index of each formatting element in a leaf node's text.\n *\n * @param {module:parsedPaper/structure.Node} tree The tree structure to be cleaned.\n *\n * @returns {module:parsedPaper/structure.Node} The cleaned up tree.\n *\n * @private\n */\nconst cleanUpTree = function( tree ) {\n\ttree.map( node => cleanUpNode( node ) );\n\treturn tree;\n};\n\nexport default cleanUpTree;\n"]}