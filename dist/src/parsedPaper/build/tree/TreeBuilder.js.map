{"version":3,"sources":["../../../../../src/parsedPaper/build/tree/TreeBuilder.js"],"names":["TreeBuilder","constructor","_buildFunctions","html","buildTree","build","bind","register","sourceText","options","language","buildFunction"],"mappings":";;;;;;AAAA;;;;;;AAEA;;;;;;;;AAQA,MAAMA,WAAN,CAAkB;AACjB;;;AAGAC,eAAc;AACb;;;;;;;AAOA,OAAKC,eAAL,GAAuB;AACtBC,SAAMC;AADgB,GAAvB;;AAIA,OAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAiB,IAAjB,CAAb;AACA,OAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcD,IAAd,CAAoB,IAApB,CAAhB;AACA;;AAED;;;;;;;;;;;AAWAD,OAAOG,UAAP,EAAmBC,UAAU,EAAEC,UAAU,MAAZ,EAA7B,EAAoD;AACnD,SAAO,KAAKR,eAAL,CAAsBO,QAAQC,QAA9B,EAA0CF,UAA1C,CAAP;AACA;;AAED;;;;;;;;;;;;;;;;;;;;;;;;AAwBAD,UAAUG,QAAV,EAAoBC,aAApB,EAAoC;AACnC,OAAKT,eAAL,CAAsBQ,QAAtB,IAAmCC,aAAnC;AACA;AA7DgB;;kBAgEHX,W","file":"TreeBuilder.js","sourcesContent":["import buildTree from \"./html/buildTree\";\n\n/**\n * Builds a tree representation of a source text.\n *\n * Currently supported languages:\n *  - HTML (`\"html\"`)\n *\n * @memberOf module:parsedPaper/builder\n */\nclass TreeBuilder {\n\t/**\n\t * Creates a new TreeBuilder.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * A registry holding the parse function to be called\n\t\t * for each supported formatting language.\n\t\t *\n\t\t * @type {Object<string,Function>}\n\t\t * @private\n\t\t */\n\t\tthis._buildFunctions = {\n\t\t\thtml: buildTree,\n\t\t};\n\n\t\tthis.build = this.build.bind( this );\n\t\tthis.register = this.register.bind( this );\n\t}\n\n\t/**\n\t * Parses the given source text to a tree representation.\n\t *\n\t * Chooses the right parser depending on the given formatting language in which the text has been written (defaults to HTML).\n\t *\n\t * @param {string} sourceText                The source text that needs to be parsed to a tree representation.\n\t * @param {Object} [options]                 Parse options.\n\t * @param {string} [options.language=\"html\"] The formatting language in which the source text has been written, e.g. `\"html\"` for HTML.\n\t *\n\t * @returns {module:parsedPaper/structure.Node} The tree representation as parsed from the source text.\n\t */\n\tbuild( sourceText, options = { language: \"html\" } ) {\n\t\treturn this._buildFunctions[ options.language ]( sourceText );\n\t}\n\n\t/**\n\t * Registers a build function for the given formatting language.\n\t *\n\t * Call this method if you want to add support for another formatting language.\n\t *\n\t * @example\n\t *   // Create a new build function.\n\t *   const myBuilder = sourceText => {\n\t *       const node = new Paragraph();\n\t *       node.textContainer.appendText( sourceText );\n\t *       return node;\n\t *   };\n\t *\n\t *   // Register the build function for the language \"my-language\".\n\t *   treeBuilder.register( \"my-language\", myBuilder );\n\t *\n\t *   // Build the tree using the registered builder.\n\t *   const tree = treeBuilder.build( \"some input\", { language: \"my-language\" } );\n\t *\n\t * @param {string}                                                            language      The language to register.\n\t * @param {function( sourceText: string ): module:parsedPaper/structure.Node} buildFunction The build function for the given language.\n\t *\n\t * @returns {void}\n\t */\n\tregister( language, buildFunction ) {\n\t\tthis._buildFunctions[ language ] = buildFunction;\n\t}\n}\n\nexport default TreeBuilder;\n"]}