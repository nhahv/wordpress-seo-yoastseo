{"version":3,"sources":["../../../../src/parsedPaper/build/PaperParser.js"],"names":["PaperParser","constructor","treeBuilder","_parsedPaper","ParsedPaper","_treeBuilder","_metaDataModifiers","parse","paper","setTree","getText","setMetaData","constructMetaData","metaData","Object","assign","runMetaDataModifiers","registerMetaDataModifier","modifierName","modifierFunction","modifiedMetaData","previousMetaData","modifierError","console","warn","message"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;;;;;;;AAQA,MAAMA,WAAN,CAAkB;AACjB;;;;;;;AAOAC,aAAaC,WAAb,EAA2B;AAC1B,OAAKC,YAAL,GAAoB,IAAIC,qBAAJ,EAApB;AACA,OAAKC,YAAL,GAAoBH,WAApB;;AAEA,OAAKI,kBAAL,GAA0B,EAA1B;AACA;;AAED;;;;;;;AAOAC,OAAOC,KAAP,EAAe;AACd;AACA,OAAKL,YAAL,CAAkBM,OAAlB,CACC,KAAKJ,YAAL,CAAmBG,MAAME,OAAN,EAAnB,CADD;;AAIA;AACA,OAAKP,YAAL,CAAkBQ,WAAlB,CACC,KAAKC,iBAAL,CAAwBJ,KAAxB,CADD;;AAIA,SAAO,KAAKL,YAAZ;AACA;;AAED;;;;;;;AAOAS,mBAAmBJ,KAAnB,EAA2B;AAC1B,MAAIK,WAAW,EAAf;;AAEA;;AAEA;AACAA,aAAWC,OAAOC,MAAP,CAAe,EAAf,EAAmB,KAAKC,oBAAL,CAA2BH,QAA3B,EAAqCL,KAArC,CAAnB,CAAX;;AAEA,SAAOK,QAAP;AACA;;AAED;;;;;;;;AAQAI,0BAA0BC,YAA1B,EAAwCC,gBAAxC,EAA2D;AAC1D;;;AAGA,OAAKb,kBAAL,CAAyBY,YAAzB,IAA0CC,gBAA1C;AACA;;AAED;;;;;;;;;AASAH,sBAAsBH,QAAtB,EAAgCL,KAAhC,EAAwC;AACvC,MAAIY,mBAAmBP,QAAvB;AACA,yBAAS,KAAKP,kBAAd,EAAkC,CAAEa,gBAAF,EAAoBD,YAApB,KAAsC;AACvE,OAAI;AACH,UAAMG,mBAAmBP,OAAOC,MAAP,CAAe,EAAf,EAAmBK,gBAAnB,CAAzB;AACAA,uBAAmBD,iBAAkBE,gBAAlB,EAAoCb,KAApC,CAAnB;AACA,IAHD,CAGE,OAAQc,aAAR,EAAwB;AACzBC,YAAQC,IAAR,CAAe,0BAA0BF,cAAcG,OAAQ,kCAAjD,GACb,mBAAmBP,YAAc,6BADlC;AAEA;AACD,GARD;AASA,SAAOE,gBAAP;AACA;AA1FgB;;kBA6FHpB,W","file":"PaperParser.js","sourcesContent":["import ParsedPaper from \"../ParsedPaper\";\nimport { forEach } from \"lodash-es\";\n\n/**\n * A class responsible for pre-processing the Paper, returning a ParsedPaper.\n *\n * @module parsedPaper\n *\n * @see module:parsedPaper/builder\n * @see module:parsedPaper/structure\n */\nclass PaperParser {\n\t/**\n\t * Constructs a PaperParser class.\n\t *\n\t * @param {Function} treeBuilder A function that receives text and returns a tree.\n\t *\n\t * @constructor\n\t */\n\tconstructor( treeBuilder ) {\n\t\tthis._parsedPaper = new ParsedPaper();\n\t\tthis._treeBuilder = treeBuilder;\n\n\t\tthis._metaDataModifiers = {};\n\t}\n\n\t/**\n\t * Processes a Paper resulting in a ParsedPaper.\n\t *\n\t * @param {Paper} paper The Paper to parse.\n\t *\n\t * @returns {ParsedPaper} A parsedPaper instance.\n\t */\n\tparse( paper ) {\n\t\t// Build tree and set it to the ParsedPaper.\n\t\tthis._parsedPaper.setTree(\n\t\t\tthis._treeBuilder( paper.getText() )\n\t\t);\n\n\t\t// Build metaData and set it to the ParsedPaper.\n\t\tthis._parsedPaper.setMetaData(\n\t\t\tthis.constructMetaData( paper )\n\t\t);\n\n\t\treturn this._parsedPaper;\n\t}\n\n\t/**\n\t * Constructs the metaData from the Paper.\n\t *\n\t * @param {Paper} paper The paper to construct the metaData from.\n\t *\n\t * @returns {Object} The metaData.\n\t */\n\tconstructMetaData( paper ) {\n\t\tlet metaData = {};\n\n\t\t// Map things to metaData.\n\n\t\t// Run additional modifiers;\n\t\tmetaData = Object.assign( {}, this.runMetaDataModifiers( metaData, paper ) );\n\n\t\treturn metaData;\n\t}\n\n\t/**\n\t * Sets a metaData modifying function behind a function name on the internal metaDataModifiers object.\n\t *\n\t * @param {string}   modifierName       The name of the to be registered function.\n\t * @param {Function} modifierFunction   The function that modifies the metaData. Should accept a metaData object\n\t * \t\t\t\t\t\t\t\t\t    and optionally the paper.\n\t * @returns {void}\n\t */\n\tregisterMetaDataModifier( modifierName, modifierFunction ) {\n\t\t/*\n\t\t * The metaDataModifier should accept the metaData and return the altered metaData.\n\t\t */\n\t\tthis._metaDataModifiers[ modifierName ] = modifierFunction;\n\t}\n\n\t/**\n\t * Runs all registered metaDataModifiers.\n\t * If one of the functions errors, it is skipped and its metaData changes are discarded.\n\t *\n\t * @param {Object} metaData The initial state of the metaData, that should be modified.\n\t * @param {Paper}  paper    The paper.\n\t *\n\t * @returns {Object} A modified metaData object.\n\t */\n\trunMetaDataModifiers( metaData, paper ) {\n\t\tlet modifiedMetaData = metaData;\n\t\tforEach( this._metaDataModifiers, ( modifierFunction, modifierName ) => {\n\t\t\ttry {\n\t\t\t\tconst previousMetaData = Object.assign( {}, modifiedMetaData );\n\t\t\t\tmodifiedMetaData = modifierFunction( previousMetaData, paper );\n\t\t\t} catch ( modifierError ) {\n\t\t\t\tconsole.warn( `An error with message \"${ modifierError.message}\" occurred in metaData modifier ` +\n\t\t\t\t`function called ${ modifierName }. Skipping that function...` );\n\t\t\t}\n\t\t} );\n\t\treturn modifiedMetaData;\n\t}\n}\n\nexport default PaperParser;\n"]}